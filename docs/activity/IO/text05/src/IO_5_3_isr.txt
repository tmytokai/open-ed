//
// 割り込み処理が起こると共通でこの関数が呼び出されます
// ちなみに isr は Interrupt Service Routine の略です
//
#include "setting.h"

// main.c で定義されている外部変数は extern しないと
// このソース内で使えませんので注意して下さい
// (例) extern int count;
extern int ? ;
extern int ? ;

#if __XC8_VERSION < 2000
void interrupt isr(void)
#else
void __interrupt () isr(void) 
#endif
{
    INTCONbits.GIE = 0; // 割り込み処理中に再度割り込みがかからないようにします

    // この割り込み関数は全ての割り込み処理で共通なので
    // 立っている割り込みフラグを見てどの割り込みが生じたか判断します
    
    // Timer1 割り込みフラグが立っているときは Timer1 割り込みを処理します
    if( PIR1bits.TMR1IF == 1 ){
       
        // Timer1 のカウンターと CCPR1 に値を再セットします
        // タイマー割り込みが起きてから width クロック後にコンペア割り込みをかけます
        // タイマー割り込みが起きた時に PWM 出力を High、コンペア割り込みが起きた時に Low にします
        TMR1 = (unsigned short)( 65536 - ? );
        CCPR1 = (unsigned short)( 65536 - ? + ? );
    
        RB3 = ?;

        // Timer1 割り込みフラグは自動ではリセットされないので手動でリセットします
        PIR1bits.TMR1IF = 0;       
    }
    
    // コンペア割り込みフラグが立っているときはコンペア割り込みを処理します
    if( PIR1bits.CCP1IF == 1 ){

        RB3 = ?;
             
        // コンペア割り込みフラグは自動ではリセットされないので手動でリセットします
        PIR1bits.CCP1IF = 0;       
    }

    INTCONbits.GIE = 1; // 割り込み処理が終わったので再び割り込みを許可します
}
