#include "config.h"
#include "setting.h"

int period = 0;
int width = 0;

void main(void){

    init();
    
    // PWM 周期 period とパルス幅 width (※ 単位はクロック)の計算方法
    //
    // Timer 1 がカウントアップする間隔を τ 秒とすると
    // 
    // τ = 1 / タイマークロック * prescale [秒]
    //
    // なので、PWM 周期 を a 秒、パルス幅を b 秒とすると
    //
    //  period = a/τ = a * タイマークロック / prescale [クロック]
    //  width  = b/τ = b * タイマークロック / prescale [クロック]
    //
    // と計算します ※ 16bitの範囲(65535)を超えないように注意
    //
    // 今回はタイマークロック = FOSC/4 = 1 MHz、prescale = x8 なので
    //
    // period = a * 1000000 / 8
    // width  = b * 1000000 / 8
    //

    // PWM 周期 a = 16 msec = 0.016 sec, パルス幅 b = 8 msec = 0.008 sec で period と width を計算します
    period = ? ;
    width = ? ;
    
    // Timer1 のカウンターとCCPR1に初期値をセットします
    // タイマー割り込みが起きたら PWM 出力を High にします
    // タイマー割り込みが起きてから width クロック経過後にコンペア割り込みをかけます
    // コンペア割り込みが起きたら PWM 出力を Low にします
    TMR1 = (unsigned short)( 65536 - ? );
    CCPR1 = (unsigned short)( 65536 - ? + ? );
    
    // 一応割り込みフラグをクリアしておきます
    PIR1bits.TMR1IF = 0; 
    PIR1bits.CCP1IF = 0 ;

    while(1){
        if( RB0 == 1 ){

          // PWM 周期 a = 16 msec = 0.016 sec, パルス幅 b = 8 msec = 0.008 sec
          period = ? ;
          width = ? ;

       }
        else{

          // PWM 周期 a = 8 msec = 0.008 sec, パルス幅 b = 6 msec = 0.006 sec
          period = ? ;
          width = ? ;
       }
    }

   return;
}
