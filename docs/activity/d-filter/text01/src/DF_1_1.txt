import numpy as np
import matplotlib.pyplot as plt
import wave

# Waveファイル読み込み関数
def read_wavedata(name):
    print('read: '+name)
    with wave.open(name,'r') as wavein:
        print(wavein.getparams())
        rate = wavein.getframerate()
        nframes = wavein.getnframes()
        data = wavein.readframes(wavein.getnframes())
    return np.frombuffer(data, dtype=np.int16),rate,nframes

# Waveファイル書き込み関数
def write_wavedata(name,rate,data):
    print('write: '+name)
    with wave.open( name, 'wb') as waveout:
        rawdata=np.array(data,dtype='int16').tobytes()
        waveout.setparams((1, 2, rate, len(rawdata), 'NONE', 'NONE'))
        waveout.writeframes(rawdata)

# スペクトログラム描画関数
def plot_spectrogram(data):
    cmap = plt.get_cmap('magma')
    plt.specgram(data/32768,Fs=fs,NFFT=512,scale='dB',mode='magnitude',vmax=0,vmin=-120,cmap=cmap)
    plt.colorbar()
    plt.xlabel('sec')
    plt.ylabel('Hz')
    plt.show()
   
x,fs,N = read_wavedata('DF_1_1.wav')
y = np.zeros(N)

print('')
print(f'サンプリング周波数 fs = {fs} Hz' )
print(f'信号長 N = {N} 点' )
print(f'再生時間 {N/fs} 秒' )

# 乗算器の乗数 a と b をセット
# a と b は負数でも可だが、|a| + |b| が 1.0 を超えないようにする
a = ?
b = ?

# 遅延素子の遅延時刻 n の計算
# delay に遅らせる秒数をセット
delay = ?
n = int(delay*fs)

# ディジタル線形フィルタ H(z) = a + b・z^{-n}
# 出力信号は y[i]
# i-n が負の場合は x[i-n] を足さない
for i in range(N):
    y[i] = ?
    if i-n >= 0 :
        y[i] += ?

# y[i] を wave ファイルとして保存
print('')
write_wavedata('DF_1_1_out.wav',fs,y)

print('')
print('フィルタリング前')
plot_spectrogram(x)

print('')
print('フィルタリング後')
plot_spectrogram(y)
