import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

np.set_printoptions(formatter={'float': '{: 0.3f}'.format})

# パーセプトロンの数
N = ?  # 入力層の数
K = ?  # 隠れ層の数
M = ?  # 出力層の数

#学習率
r = ?

#エポック数
E = ?

#学習データセットのサイズ
L = ?

#バッチサイズ
B = ?

# 画像データ
images = np.array(
    [
        # 画像0
        [
            [1, 0, 1],
            [1, 1, 1],
            [1, 0, 1]
        ],
        # 画像1
        [
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ],
        # 画像2
        [
            [0, 1, 0],
            [1, 1, 1],
            [0, 1, 0]
        ],
        # 画像3
        [
            [1, 0, 1],
            [0, 1, 0],
            [1, 0, 1]
        ],
        # 未知画像
        [
            [1, 1, 0],
            [1, 1, 1],
            [1, 0, 1]
        ]        
    ]
)
   
# 画像データから学習用入力を作成
data_training = tf.constant(images[:4].reshape(L,N), dtype=tf.float32)

# 学習用ラベル
label_training = tf.constant(
    [ 
        #画像 0,1 はクラス 0
        [?,?],
        [?,?], 

        #画像 2,3 はクラス1
        [?,?],
        [?,?]
    ]
    , dtype=tf.float32
)

# 未知画像から未知入力信号を作成
data = tf.constant(images[4].reshape(1,N), dtype=tf.float32)

# 画像表示
for i in range(4):
    print(f'画像{i}')
    plt.imshow(images[i],cmap='gray')
    plt.show()
    
print('未知画像')
plt.imshow(images[4],cmap='gray')
plt.show()

print('学習用入力信号')
print( data_training.numpy() )
print('\n学習用ラベル')
print( label_training.numpy() )
print('\n未知入力信号')
print( data.numpy() )
print('')

print(f'学習率={r}')
print(f'エポック数={E}')
print(f'学習データセットサイズ={L}')
print(f'バッチサイズ={B}')

# 隠れ層の重みとバイアス
# DL_2_1 からコピー
?

# 出力層の重みとバイアス
# DL_2_1 からコピー
?

# 3層ニューラルネットワーク
# DL_2_1 からコピー
?

# 損失関数
@tf.function
def loss(data_training ,label_training):
    predict = FFNN3(data_training)
    entropy = ?
    return entropy

# 評価関数
def categorical_accuracy(predict,label):
    ?

# 学習前の状態
ls = loss(data_training,label_training).numpy()
predict = FFNN3(data_training)
acc = categorical_accuracy(predict,label_training)
print('\n学習前')
print(f'学習データセット : 損失={ls:0.2f}, 正解率={acc:0.2f}')
print('画像0〜3の予測値')
print(predict.numpy())
print('')
    
# ディープラーニング実行
?

# 学習後の状態
ls = loss(data_training,label_training).numpy()
predict = FFNN3(data_training)
acc = categorical_accuracy(predict,label_training)
print('\n\n学習後')
print(f'学習データセット : 損失={ls:0.2f}, 正解率={acc:0.2f}')
print('画像0〜3の予測値')
print(predict.numpy())
print('未知画像の予測値')
print(FFNN3(data).numpy())
