import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# パーセプトロンの数
N = ?  # 入力層
K = ?  # 隠れ層
M = ?  # 出力層

#学習率
r = ?

#エポック数
E = ?

#訓練データセットのサイズ
L = ?

#バッチサイズ
B = ?

# 画像データ
images = np.array(
    [
        # 画像0
        [
            [1, 0, 1],
            [1, 1, 1],
            [1, 0, 1]
        ],
        # 画像1
        [
            [0, 1, 0],
            [1, 0, 1],
            [0, 1, 0]
        ],
        # 画像2
        [
            [0, 1, 0],
            [1, 1, 1],
            [0, 1, 0]
        ],
        # 画像3
        [
            [1, 0, 1],
            [0, 1, 0],
            [1, 0, 1]
        ],
        # 未知画像
        [
            [1, 1, 0],
            [1, 1, 1],
            [1, 0, 1]
        ]        
    ]
)
   
# 画像 0〜3 から教師信号を作成
teacher = tf.constant(images[:4].reshape(L,N), dtype=tf.float32)

# ラベル
label = tf.constant(
    [ 
        #画像 0,1 はクラス 0
        [?,?],
        [?,?], 

        #画像 2,3 はクラス1
        [?,?],
        [?,?]
    ]
    , dtype=tf.float32
)

# 未知画像から未知信号を作成
data = tf.constant(images[4].reshape(1,N), dtype=tf.float32)

# 画像表示
for i in range(4):
    print('画像'+str(i))
    plt.imshow(images[i],cmap='gray')
    plt.show()
    
print('未知画像')
plt.imshow(images[4],cmap='gray')
plt.show()

print('教師信号')
print( teacher.numpy() )
print('\nラベル')
print( label.numpy() )
print('\n未知入力信号')
print( data.numpy() )
print('')

print('学習率='+str(r))
print('エポック数='+str(E))
print('訓練データセットサイズ='+str(L))
print('バッチサイズ='+str(B))

# 隠れ層の重みとバイアス
# DL_2_1 からコピー
?

# 出力層の重みとバイアス
# DL_2_1 からコピー
?

# 3層ニューラルネットワークのオペレーション定義
# DL_2_1 からコピー
?

# 損失関数
# 上の FFNN3(data) とテキストを参考にする
@tf.function
def loss(teacher,label):
    # 隠れ層
    tmp = ? # 行列積 teacher・w_h  ※ data じゃなくて teacher なのに注意
    tmp = ? # b_h を足す
    y_h = ? # 双曲線正接(tanh)関数に通す
    # 出力層
    tmp = ? # 行列積 y_h・w_o
    tmp = ? # b_o を足す
    predict = ? # softmax 関数に通す
    # カテゴリカル・クロスエントロピー
    tmp = ?  # predict を log 関数に通す
    tmp = ?  # label と掛け合わせる
    entropy = ? # 総和演算をして -1をかける ※ -1かけるのを忘れない
    return entropy

# 評価関数
# テキストを参考にする
?

# 学習前の状態
ls = loss(teacher,label).numpy()
predict = FFNN3(teacher)
acc = categorical_accuracy(predict,label)
print('\n学習前')
print('訓練データセット　 : 損失={:0.2f}, 正解率={:0.2f}'.format(ls,acc))
print('画像0〜3の予測確率')
print(predict.numpy())
print('')
    
# ディープラーニング実行
# テキストを参考にする
?

# 学習後の状態
ls = loss(teacher,label).numpy()
predict = FFNN3(teacher)
acc = categorical_accuracy(predict,label)
print('\n\n学習後')
print('訓練データセット　 : 損失={:0.2f}, 正解率={:0.2f}'.format(ls,acc))
print('画像0〜3の予測確率')
print(predict.numpy())
print('未知画像の予測確率')
print(FFNN3(data).numpy())
