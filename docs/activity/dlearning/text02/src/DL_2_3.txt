import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

#---------------------------
# データセット読み込み

from tensorflow.keras.datasets import mnist

# (images_training, classno_training) は学習データセットで計 60,000 組
# (images_test, classno_test) はテストデータセットで計 10,000 組
# images〜 は 28x28, 8bit モノクロ画像 (画素値 0〜255)
# classno〜 はそれぞれの画像が属するクラス番号 (0〜9の計10クラス)

(images_training, classno_training), (images_test, classno_test) = mnist.load_data()
classnames=['0','1','2','3','4','5','6','7','8','9']
#---------------------------

images_training = images_training / 255.0  # 0〜1の範囲に正規化
images_test = images_test / 255.0  # 0〜1の範囲に正規化

# パーセプトロンの数
N = np.prod(images_training.shape[1:]) # 入力層は画像サイズから計算
K = ?  # 隠れ層
M = np.max(classno_training)+1  # 出力層はクラス数から計算

#学習率
r = ?

#エポック数
E = ?

#学習データセットのサイズ
L = images_training.shape[0]

#バッチサイズ
B = ?

# 学習データセットを演習用のフォーマットに変換
data_training = tf.constant(images_training.reshape(L,N), dtype=tf.float32)
label_training = tf.constant( tf.keras.utils.to_categorical(classno_training, M), dtype=tf.float32)

# 今回は検証データセットは使わない

# テストデータセットを演習用のフォーマットに変換
data_test = tf.constant(images_test.reshape(images_test.shape[0],N), dtype=tf.float32)
label_test = tf.constant( tf.keras.utils.to_categorical(classno_test, M), dtype=tf.float32)

print('N='+str(N))
print('K='+str(K))
print('M='+str(M))
print('学習率='+str(r))
print('エポック数='+str(E))
print('学習データセットサイズ='+str(L))
print('バッチサイズ='+str(B))

# 隠れ層の重みとバイアス
# DL_2_2 からコピー
?

# 出力層の重みとバイアス
# DL_2_2 からコピー
?

# 3層ニューラルネットワークのオペレーション定義
# DL_2_2 からコピー
?

# 損失関数
# DL_2_2 からコピー
?

# 評価関数
# DL_2_2 からコピー
?

# 学習前の状態
ls = loss(data_training,label_training).numpy()
predict = FFNN3(data_training)
acc = categorical_accuracy(predict,label_training)
print('\n学習前')
print('学習データセット　 : 損失={:0.2f}, 正解率={:0.2f}'.format(ls,acc))
print('')
    
# ディープラーニング実行
# DL_2_2 からコピー
?

# 学習後の状態
ls = loss(data_training,label_training).numpy()
predict = FFNN3(data_training)
acc = categorical_accuracy(predict,label_training)
print('\n\n学習後')
print('学習データセット　 : 損失={:0.2f}, 正解率={:0.2f}'.format(ls,acc))

ls_test = loss(data_test,label_test).numpy()
predict_test = FFNN3(data_test)
acc_test = categorical_accuracy(predict_test,label_test)
predict_test = predict_test[0:10].numpy()
print('テストデータセット : 損失={:0.2f}, 正解率={:0.2f}'.format(ls_test,acc_test))
print('')

# 参考までにテストデータの先頭 10 データに対する予測値を表示
for i in range( 10 ): 
    print('\nテスト画像'+str(i))
    plt.imshow(images_test[i],cmap='gray')
    plt.show()
    print('正解='+classnames[int(classno_test[i])])
    print('予測='+classnames[int(np.argmax(predict_test[i]))])
    print('予測値')
    for j in range(M):
        print(classnames[j] +': {:0.2f}'.format( predict_test[i][j] ) )
