#coding: UTF-8
import tensorflow as tf

# セッション作成
sess = tf.Session()

# パーセプトロンの数
N = ?
K = ?
M = ?

# 教師信号
op_const_teacher = tf.constant(
    ?
    , tf.float32
)

# ラベル
op_const_label = tf.constant(
    [ 
        #画像1,2 はクラス1
        [?,?], 
        [?,?], 

        #画像3,4 はクラス2
        [?,?], 
        [?,?] 
    ]
    , tf.float32
)

# ↓ ここから DL-2-1 の内容をコピペ

# 「入力層 OP の定義」をコピペする


# 「隠れ層の重みとバイアス」をコピペする


# 「隠れ層 OP の定義」をコピペする


# 「出力層の重みとバイアス」をコピペする


# 「出力層 OP の定義」をコピペする


# ↑ DL-2-1 のコピペここまで

# 3 層ニューラルネットワーク作成
op_input_layer = ?    # 入力されるのは op_const_data でなくて op_const_teacher なのに注意
op_hidden_layer = ?
op_output_layer = ?

# クロスエントロピー  OP の定義
def cross_entropy( r, l ):
   ?

# 学習率
r = ?

# クロスエントロピーと勾配降下法 OP の作成
op_cross_entropy = ?
op_grad_optimizer = ?

# セッション開始
sess.run( tf.global_variables_initializer() )

print('教師信号')
print( sess.run( op_const_teacher ) )

print('ラベル')
print( sess.run( op_const_label ) )

print('学習前エントロピー')
print( sess.run( op_cross_entropy ) )

print('教師信号の判別結果(学習前)')
result = sess.run( op_output_layer )
for i in range( len(result) ):
    print( [ "{:0.2f}".format(x) for x in result[i] ] )

print('ディープラーニング中・・・')
for i in range( ? ):
    sess.run( op_grad_optimizer )

print('学習後エントロピー')
print( sess.run( op_cross_entropy ) )

print('教師信号の判別結果(学習後)')
result = sess.run( op_output_layer )
for i in range( len(result) ):
    print( [ "{:0.2f}".format(x) for x in result[i] ] )
