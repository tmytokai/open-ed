import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

#---------------------------
# データセット読み込み

from tensorflow.keras.datasets import mnist

# (images_training, classno_training) は学習データセットで計 60,000 組
# (images_test, classno_test) はテストデータセットで計 10,000 組
# images〜 は 28x28, 8bit モノクロ画像 (画素値 0〜255)
# classno〜 はそれぞれの画像が属するクラス番号 (0〜9の計10クラス)

(images_training, classno_training), (images_test, classno_test) = mnist.load_data()
classnames=['0','1','2','3','4','5','6','7','8','9']
#---------------------------

images_training = images_training / 255.0  # 0〜1の範囲に正規化
images_test = images_test / 255.0  # 0〜1の範囲に正規化

# パーセプトロンの数
N = np.prod(images_training.shape[1:]) # 入力層の数は画像サイズから計算
K = ?  # 隠れ層の数
M = np.max(classno_training)+1  # 出力層の数はクラス数から計算

#学習率
r = ?

#エポック数
E = ?

#学習データセットのサイズは学習データセットの行数から計算
L = images_training.shape[0]

#バッチサイズ
B = ?

# 学習データセットを演習用のフォーマットに変換
data_training = tf.constant(images_training.reshape(L,N), dtype=tf.float32)
label_training = tf.constant( tf.keras.utils.to_categorical(classno_training, M), dtype=tf.float32)

# 今回は検証データセットは使わない

# テストデータセットを演習用のフォーマットに変換
data_test = tf.constant(images_test.reshape(images_test.shape[0],N), dtype=tf.float32)
label_test = tf.constant( tf.keras.utils.to_categorical(classno_test, M), dtype=tf.float32)

print(f'N={N}')
print(f'K={K}')
print(f'M={M}')
print(f'学習率={r}')
print(f'エポック数={E}')
print(f'学習データセットサイズ={L}')
print(f'バッチサイズ={B}')

# 3層ニューラルネットワークの構築
# DL_3_1 からコピー
?

# 学習設定
# テキストを参考にする
?

# モデルの概要表示
model.summary()

# 学習前の状態
ls, acc = model.evaluate(data_training, label_training, verbose=0)
print('\n学習前')
print(f'学習データセット : 損失={ls:0.2f}, 正解率={acc:0.2f}')
print('')
    
# ディープラーニング実行
# 学習中の経過を表示したい場合は verbose=1 にする
# テキストを参考にする
?

# 学習後の状態
ls, acc = model.evaluate(data_training, label_training, verbose=0)
ls_test, acc_test = model.evaluate(data_test, label_test, verbose=0)
print('\n\n学習後')
print(f'学習データセット : 損失={ls:0.2f}, 正解率={acc:0.2f}')

predict_test = model.predict(data_test[0:10])
print(f'テストデータセット : 損失={ls_test:0.2f}, 正解率={acc_test:0.2f}')
print('')

# 参考までにテストデータの先頭 10 データに対する予測値を表示
for i in range( 10 ): 
    print(f'\nテスト画像{i}')
    plt.imshow(images_test[i],cmap='gray')
    plt.show()
    print('正解='+classnames[int(classno_test[i])])
    print('予測='+classnames[int(np.argmax(predict_test[i]))])
    print('予測値')
    for j in range(M):
        print(classnames[j] +f': {predict_test[i][j]:0.2f}')
