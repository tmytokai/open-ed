# coding: utf-8
%matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import math
import re

scale=8 # PCの画面が小さいときは数字を下げる
dpi=100
xmin=-3
xmax=3
ymin=-3
ymax=3
plotlist=[]

plt.figure(figsize=(scale, scale), dpi=dpi)

ax = plt.subplot(111)
ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)
ax.spines['bottom'].set_position(('data',0))
ax.spines['left'].set_position(('data',0))
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
#ax.grid()
ax.text(xmax+0.1,-0.1,'Re[z]',fontsize=10)
ax.text(-0.2,ymax+0.1,'Im[z]',fontsize=10)

def rename(name):
    name=re.sub(r'([0-9]+)',r'_{\1}',name)
    name=re.sub(r'\*',r'^*',name)   
    return name

def complexstr(a,b,name):
    if(b>=0):
        fmt=r'${0}={1:.2f} + j\cdot {2:.2f}$'
    else:
        fmt=r'${0}={1:.2f} - j\cdot{2:.2f}$'
    return fmt.format(rename(name),a,abs(b))
        
def plot_complex(a,b,name):
    global plotlist
    if(a!=-1000):
        plotlist.append(tuple([a,b,name]))

def plot_polar(absvalue,argvalue,name):
    global plotlist
    if(absvalue!=-1000):
        plotlist.append(tuple([absvalue*np.cos(argvalue),absvalue*np.sin(argvalue),name]))
    
def exec_plot(a,b,name):   
    ax.plot(a,b,marker='.',markersize=15,color='black')
    ax.text(a+0.25,b+0.1,complexstr(a,b,name),size=10)
    
    absvalue = calc_abs(a,b)
    if(absvalue!=-1000):
        norm = np.sqrt(np.sum(np.array([a,b])**2))
        if(norm>0):
            aa=a/norm*absvalue
            bb=b/norm*absvalue
            ax.arrow(0,0,aa,bb,width=0.005,head_width=0.1,length_includes_head=True,color='red')
        ax.text(a+0.2,b-0.1,r'$|{0}|={1:.3f}$'.format(rename(name),absvalue),size=10,color='red')

        argvalue=calc_arg(a,b)
        if(argvalue!=-1000 and absvalue!=0):
            if(argvalue>0):
                t1=0
                t2=np.rad2deg(argvalue)
            else:
                t1=np.rad2deg(argvalue)
                t2=0
            arc = patches.Arc(xy=(0, 0), width=absvalue*2, height=absvalue*2, theta1=t1, theta2=t2, color='green')
            ax.add_patch(arc)
 
            da=-0.2*np.sin(argvalue)
            db= 0.2*np.cos(argvalue)
            if(argvalue<0):
                da*=-1
                db*=-1
            ax.arrow(a-da,b-db,da,db,width=0,head_width=.1,length_includes_head=True,color='green')
            ax.text(a+0.2,b-0.3,r'$\angle {0}={1:.3f}\cdot\pi$'.format(rename(name),argvalue/np.pi),size=10,color='green')


##################
# ここから


#
# 演習 1-3  (CMP_1_3)
#

# plot_complex(実部,虚部,"名前") で複素数 "Z1"、"Z2"、"Z3"、"Z4"、"Z5" を表示してください
# -1000 を正しい値に修正すると複素数が表示されます
# ルートの計算方法は np.sqrt(値) です

plot_complex(-1000,-1000,"Z1")
plot_complex(-1000,-1000,"Z2")
plot_complex(-1000,-1000,"Z3")
plot_complex(-1000,-1000,"Z4")
plot_complex(-1000,-1000,"Z5")


#
# 演習 1-4 (CMP_1_4)
#

# 複素数 a + b・j の絶対値を計算してください
# 以下の関数の戻り値(-1000)を正しい式に修正すると絶対値が表示されます
# ルートの計算方法は np.sqrt(値) です

def calc_abs(a,b):
    return -1000


#
# 演習 1-5 (CMP_1_5)
#

# plot_complex(実部,虚部,"名前") で複素共役 "Z3*、"Z4*"、"Z5*" を表示してください
# -1000 を正しい値に修正すると複素数が表示されます
# ルートの計算方法は np.sqrt(値) です

plot_complex(-1000,-1000,"Z3*")
plot_complex(-1000,-1000,"Z4*")
plot_complex(-1000,-1000,"Z5*")


#
# 演習 1-6 (CMP_1_6)
#

# 複素数 a + b・j の偏角を計算してください
# 以下の関数の戻り値(-1000)を正しい式に修正すると偏角が表示されます
# atan2 の計算方法は np.arctan2(虚部,実部) です

def calc_arg(a,b):
    return -1000


#
# 演習 1-7 (CMP_1_7)
#

# まず演習1-3と1-5の plot_complex 文をコメントアウトします
# 複数行のコメントアウトは """ 〜 """ です
#
# 次にplot_polar(絶対値,偏角,"名前") で複素数 Z6"、"Z7" を表示してください
# -1000 を正しい値に修正すると複素数が表示されます
# 円周率は np.pi です

plot_polar(-1000,-1000,"Z6")
plot_polar(-1000,-1000,"Z7")

#
# 演習 1-8 (CMP_1_8)
#

# まず Z6 の実部(a6)と虚部(b6)を計算してください(-1000 を正しい値に修正してください)
# コサインは np.cos(値) 、サインは np.sin(値) で計算します

a6=-1000
b6=-1000

# 同じように Z7 の実部(a7)と虚部(b7)を計算してください(-1000 を正しい値に修正してください)
a7=-1000
b7=-1000

# Z6+Z7 の実部(a)と虚部(b)を計算してください(-1000 を正しい式に修正してください)
a=-1000
b=-1000
plot_complex(a,b,"(Z6+Z7)")

# Z6・Z7 の絶対値(absvalue)と偏角(argvalue)を計算して下さい(-1000 を正しい式に修正してください)

absvalue=-1000
argvalue=-1000
plot_polar(absvalue,argvalue,"(Z6xZ7)")


# ここまで
##################

for i in plotlist:
    exec_plot(*i)
