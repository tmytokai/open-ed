# coding: utf-8
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

xmin=-3
xmax=3
ymin=-3
ymax=3

plt.figure(figsize=(5, 5), dpi=100)

ax = plt.subplot(111)
ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)
ax.spines['bottom'].set_position(('data',0))
ax.spines['left'].set_position(('data',0))
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
ax.grid()
ax.text(xmax+0.1,-0.1,"Real",fontsize=10)
ax.text(-0.2,ymax+0.3,"Image",fontsize=10)

def complexstr(x,y,name):
    if(y>=0):
        fmt="{0}={1:.2f} + {2:.2f} j"
    else:
        fmt="{0}={1:.2f} - {2:.2f} j"
    return fmt.format(name,x,abs(y))
        
def plot_complex(x,y,name):
    ax.plot(x,y,marker='.',markersize=15,color="black")
    ax.text(x+0.1,y+0.1,complexstr(x,y,name),size=10)

def draw_abs(x,y,name):
    answer = calc_abs(x,y)
    print("複素数 {0} の絶対値は {1:.3f}".format(complexstr(x,y,name),answer))
    norm = np.sqrt(np.sum(np.array([x,y])**2))
    xx=x/norm*answer
    yy=y/norm*answer
    ax.annotate(s='',xytext=(0,0),xy=(xx,yy), arrowprops=dict(arrowstyle = "<->",color="red"))
    ax.text(xx/2+0.1,yy/2,"{0:.3f}".format(answer),size=10,color="red")

###########
# ここから演習開始

# CMP_1_2 で複素数 z1〜z5を表示している plot_complex()文をコピーする


# 複素数 x + y・j の絶対値を計算する (以下の関数の return 1 の値を修正する)
# ルートの計算方法は  np.sqrt(値)
def calc_abs(x,y):
    return 1


# draw_abs(実部,虚部,"名前") で絶対値を表示できる
# ルートの計算方法は  np.sqrt(値)


# ここまで
###########
