# coding: utf-8
%matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import math
import re

scale=8 # PCの画面が小さいときは数字を下げる
dpi=100
xmin=-4
xmax=4
ymin=-4
ymax=4
pa=0
pb=0
msec=4

plt.figure(figsize=(scale, scale), dpi=dpi)

ax = plt.subplot(111)
ax.set_xlim(xmin,xmax)
ax.set_ylim(ymin,ymax)
ax.spines['bottom'].set_position(('data',0))
ax.spines['left'].set_position(('data',0))
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
#ax.grid()
ax.text(xmax+0.1,-0.1,'Re[z]',fontsize=10)
ax.text(-0.2,ymax+0.1,'Im[z]',fontsize=10)
          
def exec_plot(t,fin=False):
    global pa
    global pb
    if(abs_z(t)!=-1000 and arg_z(t)!=-1000):
        a = abs_z(t)*np.cos(arg_z(t))
        b = abs_z(t)*np.sin(arg_z(t))
        if(t>0):
            if(fin):
                ax.arrow(pa,pb,a-pa,b-pb,width=0.005,head_width=0.15,length_includes_head=True,color='red')
            else:
                ax.plot([pa,a],[pb,b],lw=1, color='red')
        pa=a
        pb=b
        if((t*10)%10==0):
            name=r'$z({0:.0f})$'.format(t)
            ax.plot(a,b,marker='.',markersize=15,color='black')
            ax.text(a+0.1,b+0.1,name,size=10)



##################
# ここから

# abs_z(t) が z(t) の絶対値です
# arg_z(t) が z(t) の偏角です
# -1000 を正しい戻り値に修正するとz(t)の動きが表示されます
# 円周率は np.pi です

def abs_z(t):
    return -1000

def arg_z(t):
    return -1000

# ここまで
##################

for i in range(msec*20):
    exec_plot(i/20)
exec_plot(msec,fin=True)
