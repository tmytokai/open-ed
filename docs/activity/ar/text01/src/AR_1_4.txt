#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

// 正規乱数 N( mu, sigma^2)の出力
// mu : 平均
// sigma2 : 分散
double nrand( double mu, double sigma2 )
{
    // Box-Muller 法を使用
    double sigma = sqrt(sigma2);
    double x = sqrt( -2*log( (double)rand()/RAND_MAX ) ) * cos( 2*M_PI*rand()/RAND_MAX ) ;
    return mu + sigma*x;
}


// 自己回帰モデル
void AR( double *x, // 出力信号列 x[i]
         const double *e, // 入力信号列 e[i]
         const double *a, // LPC 係数
         const int L, // 次数
         const int N  // 信号長
){
    // 演習1-1の内容をコピーする
}


// 自己相関 R[n]
double ACR( const int n, const double* f, const int N )
{
    // 自己相関の演習で作成した ACR 関数の中身をコピーする
}


// レビンソン・ダービン(Levinson-Durbin)・アルゴリズム
// x[i] を入力して hat_a[L] を計算する
void Levinson( double *x, double *hat_a, const int N, const int L )
{
    double R[L+1]; // 自己相関関数
    double P[L+1]; // PARCOR 係数
    double tmp_a[L+1];

    // hat_a[]を 0 クリア
    memset( hat_a, 0, sizeof(int)*(L+1) );

    // 標本自己相関関数を計算
    for(int n=0; n <= L; ++n ){
        R[n] = ACR( n, x, N );
    }

    double e = ? ;
    double W = ? ;

    for( int n = 1; n <= L; ++n ){
        for(int i = 1; i<=n; ++i ) tmp_a[i] = ? ;
        P[n] = ? ;
        hat_a[n] = ? ;
        for(int i = 1; i<=n-1; ++i ){
            hat_a[i] = ? ;
        }
        e = ? ;
        W = R[n+1];
        for(int i = 1; i<=n; ++i ){
            W += ? ;
        }
    }
}


int main()
{
    const int L = ? ; // 次数
    const int N = 50000; // 信号長

    const double a[L+1] = { 0, ?, ?, ?, ? };  // LPC 係数

    double e[N]={0}; // ホワイトノイズの信号列

    double X[N+L]={0};
    double *x = X+L; // 出力信号列

    double hat_a[L+1]={0}; // LPC 係数の推定値

    // ホワイトノイズをセットする
    for( int i = 0; i < N; ++i ){
        e[i] = ? ;
    }

    // 自己回帰モデル
    AR( x, e, a, L, N );

    // レビンソン・ダービン(Levinson-Durbin)・アルゴリズム
    Levinson( x, hat_a, N, L );

    printf("LPC係数の真の値と推定値\n");
    for( int n = 1; n <= L; ++n ){
        printf( "a[%d] = %lf -> hat_a[%d] = %lf\n", n, a[n], n, hat_a[n] );
    }

    return 0;
}
