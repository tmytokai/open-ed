# coding: utf-8
%matplotlib inline
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np
import math
import re

scale=4 # PCの画面が小さいときは数字を下げる
dpi=100
xmin=-4
xmax=4
ymin=-4
ymax=4
kmax=5
msecmax=8
ax=[]

C0=0
a=[0]*kmax
phi=[0]*kmax
w1=0

pa=0
pb=0

def draw_axis(ax,k):
    ax.set_xlim(xmin,xmax)
    ax.set_ylim(ymin,ymax)
    ax.spines['bottom'].set_position(('data',0))
    ax.spines['left'].set_position(('data',0))
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.text(xmax+0.2,-0.1,'Re[z]',fontsize=10)
    ax.text(-0.2,ymax+0.1,'Im[z]',fontsize=10)
    ax.text(xmin,ymax,r'$z_{'+r'{0:d}'.format(k)+r'}(t)$',fontsize=20)

def draw_axis2(ax,tmax):
    ax.set_xlim(0,tmax)
    ax.set_ylim(ymin,ymax)
    ax.spines['bottom'].set_position(('data',0))
    ax.spines['left'].set_position(('data',0))
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)
    ax.text(tmax+0.1,-0.1,'t',fontsize=10)
    
plt.figure(figsize=(scale*2, scale*(2*kmax-1)), dpi=dpi)

ax.append(list())
ax[0].append(plt.subplot2grid((2*kmax-1,2),(0,0),colspan=2))
draw_axis2(ax[0][0],msecmax)

for k in range(1,kmax):
    ax.append(list())
    ax[k].append(plt.subplot2grid((2*kmax-1,2),(2*k-1,0)))
    ax[k].append(plt.subplot2grid((2*kmax-1,2),(2*k-1,1)))
    ax[k].append(plt.subplot2grid((2*kmax-1,2),(2*k,0),colspan=2))
    draw_axis(ax[k][0],-k)
    draw_axis(ax[k][1],k)
    draw_axis2(ax[k][2],msecmax)

def exec_plot(ax,k,t,fin=False):
    global pa
    global pb
    if(abs_z(k,t)!=-1000 and arg_z(k,t)!=-1000):
        a = abs_z(k,t)*np.cos(arg_z(k,t))
        b = abs_z(k,t)*np.sin(arg_z(k,t))
        if(t>0):
            if(fin):
                ax.arrow(pa,pb,a-pa,b-pb,width=0.005,head_width=0.3,length_includes_head=True,color='red')
            else:
                ax.plot([pa,a],[pb,b],lw=1, color='red')
        pa=a
        pb=b
        if((t*10)%10==0):
            name=r'$z_{'+r'{0:d}'.format(k)+r'}'+r'({0:.0f})$'.format(t)
            cl='black'
            if(fin):
                cl='blue'
            ax.plot(a,b,marker='.',markersize=15,color=cl)
            if(t<msec):
                ax.text(a+0.2,b+0.1,name,size=10)
            else:
                ax.text(a+1.5,b+0.1,'= '+name,size=10)

def abs_z(k,t):
    return a[abs(k)]

def arg_z(k,t):
    return np.sign(k)*(w1*abs(k)*t+phi[abs(k)])

##################
# ここから

# -1000 を正しい値に修正してください 
# 円周率は np.pi です

w1=-1000  # 基本角周波数

C0=-1000  #  C[0] = 直流成分

# 各 C[k] のパラメータをセットしてください 
# C[-k]のパラメータは自動でセットされます

a[1]=-1000   # C[1]の絶対値 = z1(t)の振幅
phi[1]=-1000 # C[1]の偏角 = z1(t)の初期位相

a[2]=-1000   # C[2]の絶対値 = z2(t)の振幅
phi[2]=-1000 # C[2]の偏角 = z2(t)の初期位相

a[3]=-1000   # C[3]の絶対値 = z3t)の振幅
phi[3]=-1000 # C[3]の偏角 = z3(t)の初期位相

a[4]=-1000   # C[4]の絶対値 = z4t)の振幅
phi[4]=-1000 # C[4]の偏角 = z4(t)の初期位相

# ここまで
##################

ax[0][0].text(-0.1,ymax+0.4,r'C[0]',fontsize=10)
ax[0][0].plot([0,10],[C0,C0],lw=1, color='black')

for k in range(1,kmax):
    msec=0    
    if(a[k]!=-1000 and a[k] >0 and phi[k]!=-1000 and w1 !=-1000):
        msec=np.ceil(2*np.pi/np.abs(k*w1)).astype(np.int64)
    
    if(msec>0):
        t=np.linspace(0,msecmax,100)
        ax[k][2].text(-0.1,ymax+0.4,r'$z_{'+r'{0:d}'.format(-k)+r'}(t)+z_'+r'{0:d}(t)$'.format(k),fontsize=10)
        ax[k][2].plot(t,2*a[k]*np.cos(k*w1*t+phi[k]),lw=1, color='black')

        for i in range(msec*20):
            exec_plot(ax[k][0],-k,i/20)
        exec_plot(ax[k][0],-k,msec,fin=True)

        for i in range(msec*20):
            exec_plot(ax[k][1],k,i/20)
        exec_plot(ax[k][1],k,msec,fin=True) 
